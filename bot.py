import os
import logging
import psycopg2
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ChatMemberUpdated


# ‚úÖ –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not TOKEN or not DATABASE_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏ DATABASE_URL")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
conn = psycopg2.connect(DATABASE_URL)
cur = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cur.execute("""
    CREATE TABLE IF NOT EXISTS reports (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        username TEXT,
        text TEXT,
        date TEXT
    )
""")
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = set()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="report")],
    [InlineKeyboardButton(text="üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="get")],
    [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
])



class ReportState(StatesGroup):
    waiting_for_confirmation = State()
    waiting_for_report = State()



# üìå –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(message: Message):
    logging.info(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª /start –≤ —á–∞—Ç–µ {message.chat.id} (—Ç–∏–ø: {message.chat.type})")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–ª.\n\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:",
        reply_markup=menu_keyboard
    )





# üìå –ö–æ–º–∞–Ω–¥–∞ /report (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç")
async def report_command(message: Message, state: FSMContext):
    # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø —á–∞—Ç–∞, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º menu_keyboard
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª...", reply_markup=menu_keyboard)
    await state.set_state(ReportState.waiting_for_report)



async def handle_report_text(message: Message, state: FSMContext):
    state_data = await state.get_state()
    
    # ‚úÖ –ï—Å–ª–∏ –±–æ—Ç –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if state_data != ReportState.waiting_for_report.state:
        return
    
    user_data = await state.get_data()
    append_mode = user_data.get("append_mode", False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    cur.execute("SELECT text FROM reports WHERE user_id = %s AND date = %s", 
                (message.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    existing_report = cur.fetchone()

    if append_mode and existing_report:
        new_text = user_data.get("report_text") + "\n" + message.text.strip()
        cur.execute("UPDATE reports SET text = %s WHERE user_id = %s AND date = %s", 
                    (new_text, message.from_user.id, datetime.now().strftime("%Y-%m-%d")))
        conn.commit()
        await message.answer("‚úÖ –¢–≤–æ–π –æ—Ç—á—ë—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω!", reply_markup=menu_keyboard)
        await state.clear()
        return

    if existing_report:
        edit_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="edit_existing_report")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ –æ—Ç—á—ë—Ç—É", callback_data="add_to_report")]
        ])
        await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=edit_keyboard)
        return

    text = message.text.strip()
    await state.update_data(report_text=text, append_mode=False)

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_report")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_report")]
    ])

    await message.answer(f"üìÑ –¢–≤–æ–π –æ—Ç—á—ë—Ç:\n\n{text}\n\n–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å?", reply_markup=confirm_keyboard)
    await state.set_state(ReportState.waiting_for_confirmation)


# üìå –ö–æ–º–∞–Ω–¥–∞ /get (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç")
async def get_report_command(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π users
    cur.execute("SELECT DISTINCT username FROM reports WHERE username IS NOT NULL")
    users_from_db = cur.fetchall()
    
    if not users_from_db:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    buttons = [InlineKeyboardButton(text=f"@{user[0]}", callback_data=f"user_{user[0]}") for user in users_from_db]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer("üë§ –í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data.startswith("user_"))
async def select_user(callback: types.CallbackQuery):
    username = callback.data.replace("user_", "")

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 7 –¥–∞—Ç–∞–º–∏
    dates = [(datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
    buttons = [InlineKeyboardButton(text=date, callback_data=f"date_{username}_{date}") for date in dates]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

    await callback.message.answer(f"üìÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=keyboard)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("date_"))
async def select_date(callback: types.CallbackQuery):
    _, username, date = callback.data.split("_")

    cur.execute("SELECT text FROM reports WHERE username=%s AND date=%s", (username, date))
    record = cur.fetchone()

    if record:
        await callback.message.answer(f"üìù –û—Ç—á—ë—Ç @{username} –∑–∞ {date}:\n{record[0]}")
    else:
        await callback.message.answer(f"‚ùå –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ @{username} –∑–∞ {date}.")


@dp.callback_query(lambda c: c.data == "confirm_report")
async def confirm_report(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    new_text = user_data.get("report_text")
    append_mode = user_data.get("append_mode", False)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ø–æ–ª–Ω—è–µ–º –ª–∏ –º—ã –æ—Ç—á—ë—Ç

    cur.execute("SELECT text FROM reports WHERE user_id = %s AND date = %s", 
                (callback.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    existing_report = cur.fetchone()

    if existing_report and append_mode:
        # –î–æ–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫ —Å—Ç–∞—Ä–æ–º—É
        updated_text = existing_report[0] + "\n" + new_text
        cur.execute("UPDATE reports SET text = %s WHERE user_id = %s AND date = %s", 
                    (updated_text, callback.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    else:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç
        cur.execute("INSERT INTO reports (user_id, username, text, date) VALUES (%s, %s, %s, %s)",
                    (callback.from_user.id, callback.from_user.username, new_text, datetime.now().strftime("%Y-%m-%d")))

    conn.commit()

    await callback.message.answer("‚úÖ –û—Ç—á—ë—Ç –∑–∞–ø–∏—Å–∞–Ω!", reply_markup=menu_keyboard)
    await state.clear()
    await callback.answer()






@dp.callback_query(lambda c: c.data == "edit_report")
async def edit_report(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç:")
    await state.clear()
    await callback.answer()


@dp.callback_query(lambda c: c.data == "edit_existing_report")
async def edit_existing_report(callback: types.CallbackQuery, state: FSMContext):
    cur.execute("DELETE FROM reports WHERE user_id = %s AND date = %s",
                (callback.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    conn.commit()

    await state.clear()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å –≤ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç:")
    await state.set_state(ReportState.waiting_for_confirmation)
    await callback.answer()



@dp.callback_query(lambda c: c.data == "add_to_report")
async def add_to_report(callback: types.CallbackQuery, state: FSMContext):
    cur.execute("SELECT text FROM reports WHERE user_id = %s AND date = %s",
                (callback.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    existing_report = cur.fetchone()

    if existing_report:
        await state.update_data(report_text=existing_report[0], append_mode=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –æ—Ç—á—ë—Ç—É:")
        await state.set_state(ReportState.waiting_for_confirmation)
    else:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç –æ—Ç—á—ë—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
    
    await callback.answer()





# üìå –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(message: Message):
    await message.answer("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/report ‚Äì –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á—ë—Ç –æ –¥–Ω–µ\n"
                         "/get ‚Äì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç (–≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∞–º–∏)\n"
                         "/start ‚Äì –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", reply_markup=menu_keyboard)

# üìå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async def daily_task():
    for user_id in users:
        await bot.send_message(user_id, "üìù –ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª? –ù–∞–ø–∏—à–∏ /report [—Ç–≤–æ–π –æ—Ç–≤–µ—Ç]")


@dp.callback_query(lambda c: c.data == "report")
async def report_callback(callback: types.CallbackQuery):
    await report_command(callback.message)

@dp.callback_query(lambda c: c.data == "get")
async def get_callback(callback: types.CallbackQuery):
    await get_report_command(callback.message)

@dp.callback_query(lambda c: c.data == "help")
async def help_callback(callback: types.CallbackQuery):
    await help_command(callback.message)


@dp.chat_member()
async def bot_added_to_group(event: ChatMemberUpdated):
    if event.new_chat_member and event.new_chat_member.user.id == bot.id:
        logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {event.chat.id}")
        await bot.send_message(
            event.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã –ø—Ä—è–º–æ –∏–∑ –≥—Ä—É–ø–ø—ã. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:",
            reply_markup=menu_keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
        )

async def keep_awake():
    while True:
        try:
            logging.info("üîÑ Keep-alive ping")
            await bot.get_me()  # –ó–∞–ø—Ä–æ—Å –∫ Telegram API (–ª—é–±–æ–π –º–µ—Ç–æ–¥)
        except Exception as e:
            logging.error(f"‚ùå Keep-alive error: {e}")
        await asyncio.sleep(300)  # –ñ–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç


async def main():
    dp.message.register(start_command, Command("start"))
    dp.message.register(report_command, Command("report"))
    dp.message.register(get_report_command, Command("get"))
    dp.message.register(help_command, Command("help"))

    dp.message.register(report_command, F.text == "üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç")
    dp.message.register(get_report_command, F.text == "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç")
    dp.message.register(help_command, F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    dp.message.register(handle_report_text, F.text)

    dp.callback_query.register(select_user)
    dp.callback_query.register(select_date)
    dp.callback_query.register(confirm_report)
    dp.callback_query.register(edit_report)
    dp.callback_query.register(edit_existing_report)
    dp.callback_query.register(add_to_report)

    scheduler.add_job(daily_task, "cron", hour=18)
    scheduler.start()

    asyncio.create_task(keep_awake())

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, drop_pending_updates=True)


if __name__ == "__main__":
    asyncio.run(main())