import os
import logging
import psycopg2
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ‚úÖ –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not TOKEN or not DATABASE_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏ DATABASE_URL")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
conn = psycopg2.connect(DATABASE_URL)
cur = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cur.execute("""
    CREATE TABLE IF NOT EXISTS reports (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        username TEXT,
        text TEXT,
        date TEXT
    )
""")

cur.execute("""
    CREATE TABLE IF NOT EXISTS reminders (
        user_id BIGINT PRIMARY KEY,
        remind_time TEXT
    )
""")
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
menu_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç"), KeyboardButton(text="üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç")],
    [KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
], resize_keyboard=True)

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–ª.\n\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:", reply_markup=menu_keyboard)

# üìå –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(message: Message):
    await message.answer(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üì¢ /report ‚Äì –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á—ë—Ç –æ –¥–Ω–µ\n"
        "üìä /get ‚Äì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç (–≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∞–º–∏)\n"
        "‚è∞ /reminder ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚ÑπÔ∏è /help ‚Äì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "üîÑ /start ‚Äì –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
        reply_markup=menu_keyboard
    )

# üìå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def reminder_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{hour}:00", callback_data=f"reminder_{hour}")] for hour in range(0, 24)
    ])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="reminder_manual")])
    await message.answer("‚è∞ –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "reminder_manual")
async def manual_reminder(callback: types.CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")

@dp.callback_query(lambda c: c.data.startswith("reminder_"))
async def set_reminder(callback: types.CallbackQuery):
    hour = callback.data.replace("reminder_", "")
    remind_time = f"{hour}:00"
    cur.execute("INSERT INTO reminders (user_id, remind_time) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET remind_time = %s",
                (callback.from_user.id, remind_time, remind_time))
    conn.commit()
    await callback.message.edit_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time}!")

# üìå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
async def report_command(message: Message):
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª, –∏ —è –∑–∞–ø–∏—à—É —ç—Ç–æ –∫–∞–∫ –æ—Ç—á—ë—Ç.")

async def handle_report_text(message: Message):
    text = message.text.strip()
    if text.startswith("/") or text in ["üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç", "üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç", "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]:
        return
    date_today = datetime.now().strftime("%Y-%m-%d")
    cur.execute("SELECT text FROM reports WHERE user_id=%s AND date=%s", (message.from_user.id, date_today))
    existing_record = cur.fetchone()

    if existing_record:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"append_{text}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–º–µ–Ω–∏—Ç—å", callback_data=f"replace_{text}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]
        ])
        await message.answer(f"‚ö†Ô∏è –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
    else:
        cur.execute("INSERT INTO reports (user_id, username, text, date) VALUES (%s, %s, %s, %s)",
                    (message.from_user.id, message.from_user.username or message.from_user.first_name, text, date_today))
        conn.commit()
        await message.answer("‚úÖ –û—Ç—á—ë—Ç –∑–∞–ø–∏—Å–∞–Ω!")

# üìå –ó–∞–ø—Ä–æ—Å –æ—Ç—á—ë—Ç–∞
async def get_report_command(message: Message):
    cur.execute("SELECT DISTINCT username FROM reports WHERE username IS NOT NULL")
    users = cur.fetchall()
    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—á—ë—Ç–∞–º–∏.")
        return
    buttons = [[InlineKeyboardButton(text=f"@{user[0]}", callback_data=f"user_{user[0]}")] for user in users]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üë§ –í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("user_"))
async def select_user(callback: types.CallbackQuery):
    username = callback.data.replace("user_", "")
    dates = [(datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
    buttons = [[InlineKeyboardButton(text=date, callback_data=f"date_{username}_{date}")] for date in dates]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(f"üìÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("date_"))
async def select_date(callback: types.CallbackQuery):
    _, username, date = callback.data.split("_")
    cur.execute("SELECT text FROM reports WHERE username=%s AND date=%s", (username, date))
    record = cur.fetchone()
    if record:
        await callback.message.edit_text(f"üìù –û—Ç—á—ë—Ç @{username} –∑–∞ {date}:\n{record[0]}")
    else:
        await callback.message.edit_text(f"‚ùå –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ @{username} –∑–∞ {date}.")

# üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_reminders():
    now = datetime.now().strftime("%H:%M")
    cur.execute("SELECT user_id FROM reminders WHERE remind_time = %s", (now,))
    users = cur.fetchall()
    if not users:
        return
    for user_id in users:
        await bot.send_message(user_id[0], "üìù –í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á—ë—Ç! –ù–∞–ø–∏—à–∏ /report")

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.message.register(start_command, Command("start"))
    dp.message.register(help_command, Command("help"))
    dp.message.register(report_command, Command("report"))
    dp.message.register(get_report_command, Command("get"))
    dp.message.register(reminder_command, Command("reminder"))

    dp.message.register(handle_report_text, F.text)

    scheduler.add_job(lambda: asyncio.create_task(send_reminders()), "cron", minute="*", second=0)
    scheduler.start()

    logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
