import os
import asyncio
import asyncpg
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# üîπ –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# üîπ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîπ –°–æ–∑–¥–∞—ë–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL
async def create_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)

db_pool = None

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
async def setup_database():
    global db_pool
    db_pool = await create_db_pool()
    async with db_pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS reports (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                username TEXT,
                report TEXT,
                created_at TIMESTAMP DEFAULT now()
            )
        ''')

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–ª. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = """
    üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    ‚úÖ /report - –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç
    ‚úÖ /get_report - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç
    ‚úÖ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    """
    await message.answer(help_text)

# üîπ –ö–æ–º–∞–Ω–¥–∞ /report (—Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç)
@dp.message(Command("report"))
async def create_report(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è:")

    @dp.message()
    async def save_report(report_message: types.Message):
        async with db_pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO reports (user_id, username, report) VALUES ($1, $2, $3)",
                report_message.from_user.id, report_message.from_user.username, report_message.text
            )
        await report_message.answer("‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /get_report (–∑–∞–ø—Ä–æ—Å –æ—Ç—á—ë—Ç–∞)
@dp.message(Command("get_report"))
async def get_report(message: types.Message):
    async with db_pool.acquire() as conn:
        users = await conn.fetch("SELECT DISTINCT user_id, username FROM reports")

    if not users:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup()
    for user in users:
        keyboard.add(InlineKeyboardButton(user["username"], callback_data=f"user_{user['user_id']}"))

    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç—á—ë—Ç–µ
@dp.callback_query(lambda call: call.data.startswith("user_"))
async def select_user(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    async with db_pool.acquire() as conn:
        reports = await conn.fetch("SELECT report, created_at FROM reports WHERE user_id=$1 ORDER BY created_at DESC LIMIT 5", user_id)

    if not reports:
        await call.message.answer("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.")
        return

    report_text = "\n".join([f"{r['created_at']}: {r['report']}" for r in reports])
    await call.message.answer(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:\n{report_text}")

# üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "–ß–µ –¥–µ–ª–∞–µ—à—å?"
async def daily_reminder():
    while True:
        async with db_pool.acquire() as conn:
            users = await conn.fetch("SELECT DISTINCT user_id FROM reports")

        for user in users:
            try:
                await bot.send_message(user["user_id"], "–ß–µ –¥–µ–ª–∞–µ—à—å? üßê")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await asyncio.sleep(86400)  # –ñ–¥—ë–º 24 —á–∞—Å–∞

# üîπ –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞)
async def main():
    await setup_database()
    asyncio.create_task(daily_reminder())  # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await dp.start_polling(bot)

# üîπ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
