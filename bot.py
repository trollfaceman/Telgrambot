import os
import logging
import psycopg2
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ChatMemberUpdated
from datetime import datetime, timedelta
import locale

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")

# ‚úÖ –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not TOKEN or not DATABASE_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏ DATABASE_URL")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
conn = psycopg2.connect(DATABASE_URL)
cur = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cur.execute("""
    CREATE TABLE IF NOT EXISTS reports (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        username TEXT,
        text TEXT,
        date TEXT
    )
""")
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = set()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
# –ú–µ–Ω—é –¥–ª—è –õ–° (inline-–∫–Ω–æ–ø–∫–∏)
menu_keyboard_private = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="report")],
    [InlineKeyboardButton(text="üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="get")],
    [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
])

# –ú–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–ø (–æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
menu_keyboard_group = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç"), KeyboardButton(text="üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)



class ReportState(StatesGroup):
    waiting_for_confirmation = State()
    waiting_for_report = State()



# üìå –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(message: Message):
    keyboard = menu_keyboard_private if message.chat.type == "private" else menu_keyboard_group
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–ª.\n\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:", reply_markup=keyboard)




# üìå –ö–æ–º–∞–Ω–¥–∞ /report (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç")
async def report_command(message: Message, state: FSMContext):
    keyboard = menu_keyboard_private if message.chat.type == "private" else menu_keyboard_group
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª...", reply_markup=keyboard)
    await state.set_state(ReportState.waiting_for_report)



async def handle_report_text(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != ReportState.waiting_for_report.state:
        return

    user_data = await state.get_data()
    append_mode = user_data.get("append_mode", False)

    cur.execute("SELECT text FROM reports WHERE user_id = %s AND date = %s", 
                (message.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    existing_report = cur.fetchone()

    if append_mode and existing_report:
        new_text = existing_report[0] + "\n" + message.text.strip()  # üü¢ –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ—Ç—á—ë—Ç—É
        cur.execute("UPDATE reports SET text = %s WHERE user_id = %s AND date = %s", 
                    (new_text, message.from_user.id, datetime.now().strftime("%Y-%m-%d")))
        conn.commit()

        keyboard = menu_keyboard_private if message.chat.type == "private" else menu_keyboard_group
        await message.answer("‚úÖ –¢–≤–æ–π –æ—Ç—á—ë—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω!", reply_markup=keyboard)
        await state.clear()  # üü¢ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        return

    # üü¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (–∏–∑–º–µ–Ω–∏—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å, –æ—Ç–º–µ–Ω–∞)
    edit_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="edit_existing_report")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ –æ—Ç—á—ë—Ç—É", callback_data="add_to_report")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]
    ])

    if existing_report:
        await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=edit_keyboard)
        return

    # üü¢ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç
    text = message.text.strip()
    await state.update_data(report_text=text, append_mode=False)

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_report")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_report")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]
    ])

    await message.answer(f"üìÑ –¢–≤–æ–π –æ—Ç—á—ë—Ç:\n\n{text}\n\n–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å?", reply_markup=confirm_keyboard)
    await state.set_state(ReportState.waiting_for_confirmation)


# üìå –ö–æ–º–∞–Ω–¥–∞ /get (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç")
async def get_report_command(message: Message):
    try:
        cur.execute("SELECT DISTINCT username FROM reports WHERE username IS NOT NULL")
        users_from_db = cur.fetchall()

        if not users_from_db:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        buttons = [InlineKeyboardButton(text=f"@{user[0]}", callback_data=f"user_{user[0]}") for user in users_from_db]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await message.answer("üë§ –í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data.startswith("user_"))
async def select_user(callback: types.CallbackQuery):
    username = callback.data.replace("user_", "")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 7 –¥–∞—Ç–∞–º–∏
    dates = [(datetime.now() - timedelta(days=i)) for i in range(7)]
    buttons = [
        InlineKeyboardButton(
            text=date.strftime("%d %b (%a)"),  # –§–æ—Ä–º–∞—Ç: "31 –Ø–Ω–≤ (–°—Ä)"
            callback_data=f"date_{username}_{date.strftime('%Y-%m-%d')}"
        )
        for date in dates
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await callback.message.answer(
        f"üìÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ—Ç—á—ë—Ç–∞:", 
        reply_markup=keyboard
    )

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("date_"))
async def select_date(callback: types.CallbackQuery):
    _, username, date = callback.data.split("_")

    cur.execute("SELECT text FROM reports WHERE username=%s AND date=%s", (username, date))
    record = cur.fetchone()

    if record:
        await callback.message.answer(f"üìù –û—Ç—á—ë—Ç @{username} –∑–∞ {date}:\n{record[0]}")
    else:
        await callback.message.answer(f"‚ùå –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ @{username} –∑–∞ {date}.")


@dp.callback_query(lambda c: c.data == "confirm_report")
async def confirm_report(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    new_text = user_data.get("report_text")
    append_mode = user_data.get("append_mode", False)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ø–æ–ª–Ω—è–µ–º –ª–∏ –º—ã –æ—Ç—á—ë—Ç

    cur.execute("SELECT text FROM reports WHERE user_id = %s AND date = %s", 
                (callback.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    existing_report = cur.fetchone()

    if existing_report and append_mode:
        # –î–æ–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫ —Å—Ç–∞—Ä–æ–º—É
        updated_text = existing_report[0] + "\n" + new_text
        cur.execute("UPDATE reports SET text = %s WHERE user_id = %s AND date = %s", 
                    (updated_text, callback.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    else:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç
        cur.execute("INSERT INTO reports (user_id, username, text, date) VALUES (%s, %s, %s, %s)",
                    (callback.from_user.id, callback.from_user.username, new_text, datetime.now().strftime("%Y-%m-%d")))

    conn.commit()

    keyboard = menu_keyboard_private if callback.message.chat.type == "private" else menu_keyboard_group
    await callback.message.answer("‚úÖ –û—Ç—á—ë—Ç –∑–∞–ø–∏—Å–∞–Ω!", reply_markup=keyboard)
    await state.clear()
    await callback.answer()



@dp.callback_query(lambda c: c.data == "cancel_report")
async def cancel_report(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # üü¢ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    keyboard = menu_keyboard_private if callback.message.chat.type == "private" else menu_keyboard_group
    await callback.message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
    await callback.answer()



@dp.callback_query(lambda c: c.data == "edit_report")
async def edit_report(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç:")
    await state.clear()
    await callback.answer()


@dp.callback_query(lambda c: c.data == "edit_existing_report")
async def edit_existing_report(callback: types.CallbackQuery, state: FSMContext):
    cur.execute("DELETE FROM reports WHERE user_id = %s AND date = %s",
                (callback.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    conn.commit()

    await state.clear()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å –≤ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç:")
    await state.set_state(ReportState.waiting_for_confirmation)
    await callback.answer()



@dp.callback_query(lambda c: c.data == "add_to_report")
async def add_to_report(callback: types.CallbackQuery, state: FSMContext):
    cur.execute("SELECT text FROM reports WHERE user_id = %s AND date = %s",
                (callback.from_user.id, datetime.now().strftime("%Y-%m-%d")))
    existing_report = cur.fetchone()

    if existing_report:
        await state.update_data(report_text=existing_report[0], append_mode=True)  # üü¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –æ—Ç—á—ë—Ç—É:")
        await state.set_state(ReportState.waiting_for_report)  # üü¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç –æ—Ç—á—ë—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")

    await callback.answer()






# üìå –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(message: Message):
    keyboard = menu_keyboard_private if message.chat.type == "private" else menu_keyboard_group
    await message.answer("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/report ‚Äì –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á—ë—Ç –æ –¥–Ω–µ\n"
                         "/get ‚Äì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç (–≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∞–º–∏)\n"
                         "/start ‚Äì –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", reply_markup=keyboard)



# üìå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async def daily_task():
    cur.execute("SELECT DISTINCT user_id FROM reports")
    users_from_db = cur.fetchall()
    for user in users_from_db:
        try:
            await bot.send_message(user[0], "üìù –ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª? –ù–∞–ø–∏—à–∏ /report")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


@dp.callback_query(F.data == "report")
async def report_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()  # –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –∑–∞–≥—Ä—É–∑–∫–∏
    await report_command(callback.message, state)

@dp.callback_query(F.data == "get")
async def get_callback(callback: types.CallbackQuery):
    await callback.answer()
    await get_report_command(callback.message)

@dp.callback_query(F.data == "help")
async def help_callback(callback: types.CallbackQuery):
    await callback.answer()
    await help_command(callback.message)


@dp.message(F.text == "üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç")
async def report_text_command(message: Message, state: FSMContext):
    await report_command(message, state)

@dp.message(F.text == "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç")
async def get_text_command(message: Message):
    await get_report_command(message)

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_text_command(message: Message):
    await help_command(message)




@dp.chat_member()
async def bot_added_to_group(event: ChatMemberUpdated):
    if event.new_chat_member and event.new_chat_member.user.id == bot.id:
        logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {event.chat.id}")
        await bot.send_message(
            event.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã –ø—Ä—è–º–æ –∏–∑ –≥—Ä—É–ø–ø—ã. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:",
            reply_markup=menu_keyboard_group  # üí° –ò—Å–ø—Ä–∞–≤–∏–ª!
        )

async def keep_awake():
    while True:
        try:
            logging.info("üîÑ Keep-alive ping")
            await bot.get_me()  # –ó–∞–ø—Ä–æ—Å –∫ Telegram API (–ª—é–±–æ–π –º–µ—Ç–æ–¥)
        except Exception as e:
            logging.error(f"‚ùå Keep-alive error: {e}")
        await asyncio.sleep(300)  # –ñ–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç


async def on_shutdown():
    cur.close()
    conn.close()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")

async def main():
    dp.message.register(start_command, Command("start"))
    dp.message.register(report_command, Command("report"))
    dp.message.register(get_report_command, Command("get"))
    dp.message.register(help_command, Command("help"))
    dp.message.register(handle_report_text, ReportState.waiting_for_report)  # üí° –•–µ–Ω–¥–ª–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω

    dp.callback_query.register(select_user)
    dp.callback_query.register(select_date)
    dp.callback_query.register(confirm_report)
    dp.callback_query.register(edit_report)
    dp.callback_query.register(edit_existing_report)
    dp.callback_query.register(add_to_report)

    # üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –±–æ—Ç
    @dp.update()
    async def handle_all_updates(update: types.Update):
        logging.info(f"üîπ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")

    scheduler.add_job(daily_task, "cron", hour=18)
    scheduler.start()

    asyncio.create_task(keep_awake())

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞)
    logging.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: {dp.message.handlers}")

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, drop_pending_updates=True)

    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()


if __name__ == "__main__":
    asyncio.run(main())