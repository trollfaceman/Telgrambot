import os
import logging
import psycopg2
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ‚úÖ –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not TOKEN or not DATABASE_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏ DATABASE_URL")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
conn = psycopg2.connect(DATABASE_URL)
cur = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cur.execute("""
    CREATE TABLE IF NOT EXISTS reports (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        username TEXT,
        text TEXT,
        date TEXT
    )
""")
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = set()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
menu_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç"), KeyboardButton(text="üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç")],
    [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
], resize_keyboard=True)

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(message: Message):
    users.add(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–ª.\n\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:", reply_markup=menu_keyboard)

# üìå –ö–æ–º–∞–Ω–¥–∞ /report (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç")
async def report_command(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: /report –†–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º")

async def handle_report_text(message: Message):
    text = message.text.strip()
    cur.execute("INSERT INTO reports (user_id, username, text, date) VALUES (%s, %s, %s, %s)",
                (message.from_user.id, message.from_user.username, text, datetime.now().strftime("%Y-%m-%d")))
    conn.commit()
    await message.answer("‚úÖ –û—Ç—á—ë—Ç –∑–∞–ø–∏—Å–∞–Ω!", reply_markup=menu_keyboard)

# üìå –ö–æ–º–∞–Ω–¥–∞ /get (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç")
async def get_report_command(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/get @username YYYY-MM-DD")

# üìå –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(message: Message):
    await message.answer("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/report ‚Äì –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á—ë—Ç –æ –¥–Ω–µ\n"
                         "/get @username YYYY-MM-DD ‚Äì –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–µ\n"
                         "/start ‚Äì –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", reply_markup=menu_keyboard)

# üìå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async def daily_task():
    for user_id in users:
        await bot.send_message(user_id, "üìù –ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª? –ù–∞–ø–∏—à–∏ /report [—Ç–≤–æ–π –æ—Ç–≤–µ—Ç]")

async def main():
    dp.message.register(start_command, Command("start"))
    dp.message.register(report_command, Command("report"))
    dp.message.register(get_report_command, Command("get"))
    dp.message.register(help_command, Command("help"))

    # –ö–Ω–æ–ø–∫–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥
    dp.message.register(report_command, F.text == "üì¢ –°–æ–æ–±—â–∏—Ç—å –æ—Ç—á—ë—Ç")
    dp.message.register(get_report_command, F.text == "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç")
    dp.message.register(help_command, F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    dp.message.register(handle_report_text, F.text)

    scheduler.add_job(daily_task, "cron", hour=18)  # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
